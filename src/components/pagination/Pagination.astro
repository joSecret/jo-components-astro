---
/**
 * Pagination Component
 *
 * @description A fully accessible pagination component with first/last and previous/next navigation
 */

// Pagination Props type helpers
export type NumericalString = `${number}`
export type RouteString = string | null | undefined

interface Props {
  /**
   * Additional classes to apply
   */
  class?: string
  /**
   * Current page number
   * @default "1"
   */
  currentPage?: string | number
  /**
   * Total number of pages
   * @default "12"
   */
  totalPages?: NumericalString | number
  /**
   * URL for the first page
   * @default "#"
   */
  firstPage?: RouteString
  /**
   * URL for the previous page
   * @default "#"
   */
  previousPage?: RouteString
  /**
   * URL for the next page
   * @default "#"
   */
  nextPage?: RouteString
  /**
   * URL for the last page
   * @default "#"
   */
  lastPage?: RouteString
  /**
   * Accessible label for the navigation
   * @default "Pagination"
   */
  ariaLabel?: string
  /**
   * Accessible label for the first page button
   * @default "Go to the first page"
   */
  firstPageLabel?: string
  /**
   * Accessible label for the previous page button
   * @default "Go to the previous page"
   */
  previousPageLabel?: string
  /**
   * Accessible label for the next page button
   * @default "Go to the next page"
   */
  nextPageLabel?: string
  /**
   * Accessible label for the last page button
   * @default "Go to the last page"
   */
  lastPageLabel?: string
  /**
   * Function to render the progress text
   */
  renderProgress?: ({
    currentPage,
    totalPages,
  }: {
    currentPage: string | number
    totalPages: string | number
  }) => string
  /**
   * Function to generate the aria-label for page links
   */
  renderPageLabel?: ({
    type,
    page,
  }: {
    type: 'first' | 'previous' | 'next' | 'last'
    page: string | number
  }) => string
  /**
   * HTML attributes to spread on the pagination
   */
  [key: string]: string | number | boolean | undefined | Function
}

const {
  class: className,
  currentPage = '1',
  totalPages = '12',
  firstPage = '#',
  previousPage = '#',
  nextPage = '#',
  lastPage = '#',
  ariaLabel = 'Pagination',
  firstPageLabel = 'Go to the first page',
  previousPageLabel = 'Go to the previous page',
  nextPageLabel = 'Go to the next page',
  lastPageLabel = 'Go to the last page',
  renderProgress = ({ currentPage, totalPages }) => `Page ${currentPage} of ${totalPages}`,
  renderPageLabel = ({ type, page }) => {
    switch (type) {
      case 'first':
        return `Go to first page (page 1)`
      case 'previous':
        return `Go to previous page (page ${page})`
      case 'next':
        return `Go to next page (page ${page})`
      case 'last':
        return `Go to last page (page ${page})`
      default:
        return `Go to page ${page}`
    }
  },
  ...rest
} = Astro.props

const progress = renderProgress({ currentPage, totalPages })
---

<nav class:list={['pagination', className]} aria-label={ariaLabel} {...rest}>
  <ul class="list">
    <li>
      {
        firstPage ? (
          <a href={firstPage} aria-label={renderPageLabel({ type: 'first', page: 1 })}>
            <svg
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M24.6667 9L18 15.6667L24.6667 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M14.6667 9L8 15.6667L14.6667 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </a>
        ) : (
          <span class="disabled">
            <svg
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M24.6667 9L18 15.6667L24.6667 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M14.6667 9L8 15.6667L14.6667 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </span>
        )
      }
    </li>
    <li>
      {
        previousPage ? (
          <a
            href={previousPage}
            aria-label={renderPageLabel({
              type: 'previous',
              page: Number(currentPage) - 1,
            })}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 24 24"
            >
              <path
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m14 7-5 5 5 5"
              />
            </svg>
          </a>
        ) : (
          <span class="disabled">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 24 24"
            >
              <path
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m14 7-5 5 5 5"
              />
            </svg>
          </span>
        )
      }
    </li>
    <li>
      <span>{progress}</span>
    </li>
    <li>
      {
        nextPage ? (
          <a
            href={nextPage}
            aria-label={renderPageLabel({
              type: 'next',
              page: Number(currentPage) + 1,
            })}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 24 24"
            >
              <path
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m10 7 5 5-5 5"
              />
            </svg>
          </a>
        ) : (
          <span class="disabled">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 24 24"
            >
              <path
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m10 7 5 5-5 5"
              />
            </svg>
          </span>
        )
      }
    </li>
    <li>
      {
        lastPage ? (
          <a
            href={lastPage}
            aria-label={renderPageLabel({
              type: 'last',
              page: totalPages,
            })}
          >
            <svg
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M7.33333 9L14 15.6667L7.33333 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M17.3333 9L24 15.6667L17.3333 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </a>
        ) : (
          <span class="disabled">
            <svg
              aria-hidden="true"
              width="32"
              height="32"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M7.33333 9L14 15.6667L7.33333 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M17.3333 9L24 15.6667L17.3333 22.3333"
                stroke="currentColor"
                stroke-width="2.66667"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </span>
        )
      }
    </li>
  </ul>
</nav>

<style>
  :where(.pagination .list) {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  :where(.pagination .list li) {
    margin: 0;
    padding: 0;
  }

  :where(.pagination a),
  :where(.pagination .disabled) {
    --transition-duration: 0.2s;
    --transition-easing: cubic-bezier(0.165, 0.84, 0.44, 1);

    display: flex;
    justify-content: center;
    place-items: center;
    border: 2px solid;
    border-radius: 0.5rem;
    inline-size: 2.5rem;
    block-size: 2.5rem;

    @media (prefers-reduced-motion: no-preference) {
      transition: box-shadow var(--transition-duration) var(--transition-easing);
    }
  }

  :where(.pagination a),
  :where(.pagination a:visited) {
    border-color: light-dark(hsl(0 0% 10%), hsl(0 0% 90%));
    color: currentColor;
  }

  :where(.pagination a:hover),
  :where(.pagination a:focus-visible) {
    box-shadow: 0 0 0 0.25rem;
  }

  :where(.pagination a:focus-visible) {
    outline: none;
  }

  :where(.pagination .disabled) {
    opacity: 0.5;
    border-color: light-dark(hsl(0 0% 13% / 0.3), hsl(0 0% 87% / 0.3));
  }
</style>
